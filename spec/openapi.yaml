openapi: 3.0.0
info:
  title: Service Catalog API
  description: Service Catalog API is a REST API written in Golang that can be used as a storage of a collection of services along with it's respective versions.
  version: 2.0.2
servers:
  - url: http://localhost:8010
    description: Development server
tags:
  - name: Auth
    description: User signup and login
  - name: User
    description: Fetch and update user
  - name: Services
    description: CRUD for services
  - name: Service Versions
    description: CRUD for service-versions
paths:
  /signup:
    post:
      tags:
        - Auth
      summary: For the user to signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZDkwZjliNDktZGNkOS00ZmViLTgyNTAtZDAxMzA5OGU0NWVlIn0.hKi05cpOUOP3WLjptbSuRSFQVxFcVU3NgkkBxuSXS_g
                  msg:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    examples:
                    - Try using a different email.
                    - Invalid body.
        '422':
          description: Unprocessable entity
        '500':
          description: Failed operation
  /login:
    post:
      tags:
        - Auth
      summary: For the user to login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZDkwZjliNDktZGNkOS00ZmViLTgyNTAtZDAxMzA5OGU0NWVlIn0.hKi05cpOUOP3WLjptbSuRSFQVxFcVU3NgkkBxuSXS_g
                  msg:
                    type: string
                    example: User logged in successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid body
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid email or password. Please try again
        '422':
          description: Unprocessable entity
        '500':
          description: Failed operation
  /user:
    get:
      tags:
        - User
      summary: To fetch user email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: johndoe@gmail.com
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  msg:
                    type: string
                    example: Fetched user info successfully
        '401':
          description: Unauthorized
        '500':
          description: Failed operation
    put:
      tags:
        - User
      summary: To update the user email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe1@gmail.com
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User with this mail already exists.
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
        '500':
          description: Failed operation
  /services:
    get:
      tags:
        - Services
      summary: To fetch all the services
      parameters:
        - name: limit
          in: query
          description: The number of services to fetch
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          description: The pagination offset
          required: true
          schema:
            type: integer
        - name: orderBy
          in: query
          description: To order by 'ASC' or 'DESC' (Default is 'ASC')
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: To search for a particular service by name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/serviceWithoutVersion'
                  msg:
                    type: string
                    example: Services fetched successfully.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    examples:
                    - Invalid limit value
                    - Invalid offset value
        '401':
          description: Unauthorized
        '204':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: No services found.
        '500':
          description: Failed operation
  /service:
    post:
      tags:
        - Services
      summary: To create a new service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: backend
                  minLength: 3
                description:
                  type: string
                  example: this is the backend description
                  minLength: 20
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    examples: 
                    - Service with same name exists.
                    - Invalid body.
        '401':
          description: Unauthorized
        '500':
          description: Failed operation
  /service/{id}:
    get:
      tags:
        - Services
      summary: To fetch a given service
      parameters:
        - name: id
          in: path
          description: The id of the service
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/serviceWithVersion'
                  msg:
                    type: string
                    example: Service fetched successfully.
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Failed operation
    put:
      tags:
        - Services
      summary: To update the service name/description
      parameters:
        - name: id
          in: path
          description: The id of the service
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: catalog-backend
                description:
                  type: string
                  example: this is the catalog backend
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
        '500':
          description: Failed operation
    delete:
      tags:
        - Services
      summary: To delete a given service
      parameters:
        - name: id
          in: path
          description: The id of the service
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Failed operation
  /service/{id}/version:
    post:
      tags:
        - Service Versions
      summary: To create a version for a given service
      parameters:
        - name: id
          in: path
          description: The id of the service
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
                  example: v1.0.1
                  minLength: 2
                changelog:
                  type: string
                  example: fix for x feature
                  minLength: 10
      responses:
        '201':
          description: Successful created
        '400':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Service with same version exists.
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '422':
          description: Unprocessable Entity
        '500':
          description: Failed operation
  /service/{id}/version/{vid}:
    delete:
      tags:
        - Service Versions
      summary: To delete a given service
      parameters:
        - name: id
          in: path
          description: The id of the service
          required: true
          schema:
            type: integer
        - name: vid
          in: path
          description: The vid of the service version
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Failed operation
components:
  schemas:
    auth:
      type: object
      properties:
        email:
          type: string
          example: johndoe@gmail.com
          maxLength: 50
        password:
          type: string
          example: johndoe123
          minLength: 7
          maxLength: 15
    serviceWithoutVersion:
      type: object
      properties:
        service_id:
          type: integer
          example: 1
        name:
          type: string
          example: backend
        description:
          type: string
          example: this is the backend description
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version_count:
          type: integer
          example: 2
    serviceWithVersion:
      type: object
      properties:
        service_id:
          type: integer
          example: 1
        name:
          type: string
          example: backend
        description:
          type: string
          example: this is the backend description
        sv_id:
          type: integer
          example: 1
        version:
          type: string
          example: v1.0.1
        changelog:
          type: string
          example: change that took place